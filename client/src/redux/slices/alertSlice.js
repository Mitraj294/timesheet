// /home/digilab/timesheet/client/src/redux/slices/alertSlice.js
import { createSlice, nanoid } from '@reduxjs/toolkit';

const initialState = []; // The state is an array of alert objects

const alertSlice = createSlice({
  name: 'alerts', // The name of the slice in the Redux state
  initialState,
  reducers: {
    // Action for adding a new alert to the state.
    // Using 'prepare' to ensure each alert gets a unique ID and a default timeout.
    setAlert: {
      reducer(state, action) {
        // Immer handles immutability, so we can 'push' directly.
        state.push(action.payload);
      },
      prepare(msg, alertType, timeout = 5000) {
        // This 'prepare' callback formats the action payload.
        return {
          payload: {
            id: nanoid(), // Generate a unique ID for each alert.
            msg,
            alertType,
            timeout, // Timeout for how long the alert should be visible.
          },
        };
      },
    },
    // Action for removing an alert from the state by its ID.
    removeAlert(state, action) {
      // action.payload is expected to be the ID of the alert to remove.
      const idToRemove = action.payload;
      // Filter out the alert with the matching ID.
      return state.filter(alert => alert.id !== idToRemove);
    },
  },
});

// Export the generated action creators for use in components/thunks.
export const { setAlert, removeAlert } = alertSlice.actions;

// Export the reducer function
export default alertSlice.reducer;

// Optional: Thunk action creator to handle automatic removal after timeout
export const setAlertWithTimeout = (msg, alertType = 'info', timeout = 5000) => (dispatch) => {
    // Create the alert action using the prepared action creator.
    const alertAction = setAlert(msg, alertType, timeout);
    // Get the unique ID generated by `prepare`.
    const id = alertAction.payload.id;
    // Dispatch the action to add the alert to the state.
    dispatch(alertAction);
    // Set a timeout to automatically remove the alert after the specified duration.
    setTimeout(() => dispatch(removeAlert(id)), timeout);
};
